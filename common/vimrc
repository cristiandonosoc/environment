" This is the common vimrc that is common to all platforms.
" Specific configurations for each platform will be tried to be loaded from
" the name ".vimrc.${PLATFORM}" (eg. .vimrc.windows, .vimrc.linux, etc.).

" , is my leader
let g:mapleader = ","

set runtimepath=$VIMRUNTIME,~/.nvim,~/.nvim/after,~/.nvim/autoload

function! s:loadExtraVimFileIfExists(file)
		execute 'source ' . a:file
endfunction

" VUNDLE (PLUGINS)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let data_dir = '~/.nvim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

set rtp+=~/.nvim/autoload

call plug#begin('$HOME/.nvim/plugged')

" Plugin handler
" Plugin 'VundleVim/Vundle.vim'

" Better filesystem management
Plug 'scrooloose/nerdtree'

" Autocomplete with C/C++ semantics
Plug 'Valloric/YouCompleteMe'

" OpenGL syntax
Plug 'tikhomirov/vim-glsl'

" Better info line.
Plug 'bling/vim-airline'

" Terraform support
Plug 'hashivim/vim-terraform'

" Better C++ highlighting.
Plug 'bfrg/vim-cpp-modern'

" LSP Config.
" Plug 'neovim/nvim-lspconfig'

" Rust tools.
Plug 'simrat39/rust-tools.nvim'

" Inlay hints.
Plug 'simrat39/inlay-hints.nvim'


call plug#end()


" COLORS AND FONTS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Syntax highlighting
syntax enable

" Set extra options when running in GUI mode
if has("gui_running")
    set guifont=Consolas:h10
    set guioptions-=T           " Include window toolbar
    set guioptions-=e           " Add tab pages
    set t_Co=256                " Number of colors in the terminal
    set guitablabel=%M\ %t      " Tab Name formatting
else
  try
    set term=xterm-256color     " Typical color setting
  catch
  endtry
endif

" Use Unix as the standard file type
" set fileformats=unix,dos,mac
" set fileformat=unix
set fileformat=unix

" SPELL CHECKING
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set spelllang=es,en                         " Spelling languages
set spellsuggest=10                         " Number of spelling suggestions
"set spellfile=~/.nvim/spell/mine.utf-8.add   " Spell file for additions

" Pressing ,ss will toggle and untoggle spell checking
map <leader>ss :setlocal spell!<cr>

" Shortcuts using <leader>
map <leader>sn ]s           " Next spell error
map <leader>sp [s           " Previous spell error
map <leader>sa zg           " Add word to dictionary
map <leader>s? z=           " Proposals for words (not very friendly, but works)

" VISUAL MODE
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Visual mode pressing * or # searches for the current selection
function! VisualSelection(direction, extra_filter) range
    let l:saved_reg = @"
    execute "normal! vgvy"

    let l:pattern = escape(@", '\\/.*$^~[]')
    let l:pattern = substitute(l:pattern, "\n$", "", "")

    if a:direction == 'b'
        execute "normal ?" . l:pattern . "^M"
    elseif a:direction == 'gv'
        call CmdLine("Ack \"" . l:pattern . "\" " )
    elseif a:direction == 'replace'
        call CmdLine("%s" . '/'. l:pattern . '/')
    elseif a:direction == 'f'
        execute "normal /" . l:pattern . "^M"
    endif

    let @/ = l:pattern
    let @" = l:saved_reg
endfunction

vnoremap <silent> * :call VisualSelection('f', '')<CR>
vnoremap <silent> # :call VisualSelection('b', '')<CR>

vnoremap <silent> <leader>j :call VisualSelection('f', '')<CR>
vnoremap <silent> <leader>k :call VisualSelection('b', '')<CR>


colorscheme oxeded
let g:NERDTreeShowHidden=1

d

autocmd FileType javascript setlocal shiftwidth=2 expandtab tabstop=2
autocmd FileType typescript setlocal shiftwidth=2 expandtab tabstop=2
au BufRead,BufNewFile *.Jenkinsfile setfiletype groovy

" PLATFORM SPECIFIC CONFIGURATIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('win32') || has('win64')
	call s:loadExtraVimFileIfExists("~/.vimrc.windows")
endif

if has('unix')
" call s:loadExtraVimFileIfExists("~/.vimrc.linux")
endif

" EXTRAS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

call s:loadExtraVimFileIfExists("~/.nvim/vimrc_extras.vim")
